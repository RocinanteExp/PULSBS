openapi: 3.0.1
info:
  title: Rest API for PULSBS
  description: >-
    Open rest API of PULSBS server (pandemic university lecture seat booking
    system)
  contact:
    email: s276509@studenti.polito.it
  version: 0.2.0
servers:
  - url: 'http://localhost:3001/api/v1'
tags:
  - name: student
    description: Everything about the students
  - name: teacher
    description: Everything about the teachers
  - name: general
    description: General services
externalDocs:
  description: Visualize the api with swagger editor
  url: https://editor.swagger.io/
paths:
  /login:
    post:
      tags:
      - general
      summary: User request to sign in system
      operationId: userLogin 
      requestBody:
        description: The credetials needed are email and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          description: "Login was successful. Note:there are 2 extra fields (studentId and type)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: "Email/password are not lexical valid"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                        msg:
                          type: string
                        param:
                          type: string
                        location:
                          type: string
        '401':
          description: Credetials are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "incorrect userId or password"
  /students/{studentId}/courses:
    get:
      tags:
        - student
      summary: get all enrolled courses in this academic year
      operationId: studentGetCourses 
      parameters:
      - in: path
        name: studentId
        required: true
        schema:
          type: integer
        description: student id
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '400':
          description: "Parameter studentId is not an integer"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                        msg:
                          type: string
                        param:
                          type: string
                        location:
                          type: string
        '500':
          description: Generic server error. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "string"
  /students/{studentId}/courses/{courseId}/lectures:
    get:
      tags:
        - student
      summary: get all active lectures of a particular course
      description: Get all active lectures, which are still not delivered, for a course enrolled by a particular student
      operationId: studentGetCourseLectures 
      parameters:
      - in: path
        name: studentId
        required: true
        schema:
          type: integer
        description: student id
      - in: path
        name: courseId
        required: true
        schema:
          type: integer
        description: course id
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lecture'
        '400':
          description: "Parameter/s are not lexical correct. Another possibilities: the student is not enrolled in this course; db generic error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                        msg:
                          type: string
                        param:
                          type: string
                        location:
                          type: string
        '500':
          description: Generic server error. Not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: internal server error
  /students/{studentId}/courses/{courseId}/lectures/{lectureId}:
      delete:
        tags:
          - student
        summary : delete the booking of a particular lecture
        operationId: deleteBookLecture
        parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
          description: student id
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
          description: course id
        - in: path
          name: lectureId
          required: true
          schema:
            type: integer
          description: lecture id
        responses:
          "204":
            description : The delete operation was successful
            content : {}
          "400":
            description: Bad request, errors in path parameters
            content : 
              application/json : 
                schema : 
                  $ref : '#/components/schemas/Error'
          "404":
            description: Not found (e.g. the lecture to cancel doesn't exist)
            content : {}
          "500":
            description : Internal Error
            content:
              application/json : 
                schema : 
                  $ref : '#/components/schemas/Error'
      post:
        tags:
        - student
        summary: book a particular lecture
        operationId: studentBookLecture 
        parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
          description: student id
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
          description: course id
        - in: path
          name: lectureId
          required: true
          schema:
            type: integer
          description: lecture id
        requestBody:
          description: The id of the student that want to book a lecture
          content:
            application/json:
              schema:
                type: object
                properties:
                  stundetId:
                    type: integer
                    example: 1
          required: true
        responses:
          '200':
            description: The booking was successful
            content: {}
          '400':
            description: "Parameter/s are not lexical correct. Another possibilities: the student is not enrolled in this course; the lecture is not related to this course; the lecture was already booked; db generic error"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    errors:
                      type: array
                      items:
                        type: object
                        properties:
                          value:
                            type: string
                          msg:
                            type: string
                          param:
                            type: string
                          location:
                            type: string
          '500':
            description: "Generic server error. Not implemented"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example:
                  error: internal server error
  /students/{studentId}/bookings:
    get:
      tags:
        - student
      summary: Return the list of the future booking lectures
      operationId: getBookingLectures
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
          description: student id
      responses:
        '200':
          description: The request was successful
          content : 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lecture'
        '400':
          description: Bad request, errors in path parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /teachers/{teacherId}/courses:
    get:
      tags:
        - teacher
      summary:  "Get all courses taught in this academic year by a given professor"
      operationId: teacherGetCourses 
      parameters:
      - in: path
        name: teacherId
        required: true
        schema:
          type: integer
        description: teacher id
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseJTeacherCourse'
        '400':
          description: "'teacherId' parameter is not valid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                source: "TeacherService"
                errno: 1
                error: "'teacherId' parameter is not an integer: fail"
                statusCode: 400
        '500':
          description: Generic server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /teachers/{teacherId}/courses/{courseId}/lectures:
    get:
      tags:
        - teacher
      summary: "Get all active lectures of a given course"
      description: "Get all active lectures, which have not yet been delivered, for a course taught by a given professor"
      operationId: teacherGetCourseLectures
      parameters:
      - in: path
        name: teacherId
        required: true
        schema:
          type: integer
        description: teacher id
      - in: path
        name: courseId
        required: true
        schema:
          type: integer
        description: course id
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lecture'
        '400':
          description: "'teacherId' parameter is not valid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                source: "TeacherService"
                errno: 1
                error: "'teacherId' parameter is not an integer: fail"
                statusCode: 400
        '404':
          description: "'teacherId' parameter is not valid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                source: "TeacherService"
                errno: 30
                error: "course (courseId = 3) is not taught by this teacher (teacherId = 4)"
                statusCode: 404
        '500':
          description: Generic server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /teachers/{teacherId}/courses/{coursesId}/lecture/{lectureId}:
    put:
      tags:
        - teacher
      summary: Switch the lecture modality (in presence,remote)
      operationId: switchLecture
      parameters:
      - in: path
        name: teacherId
        required: true
        schema:
          type: integer
        description: teacher id
      - in: path
        name: courseId
        required: true
        schema:
          type: integer
        description: course id
      - in: path
        name: lectureId
        required: true
        schema:
          type: integer
        description: lecture id
      - in: query
        name: switchTo
        schema:
          type: string
        description: the string to switch (only "presence" and "remote" value are permitted)
      responses:
        "204":
          description: The switching process was succesful
          content: {}
        "400":
            description: Bad request, errors in path parameters
            content : 
              application/json : 
                schema : 
                  $ref : '#/components/schemas/Error'
        "500":
            description : Internal Error
            content:
              application/json : 
                schema : 
                  $ref : '#/components/schemas/Error'
    delete:
      tags:
        - teacher
      summary: Delete a lecture
      operationId: deleteLecture
      parameters:
      - in: path
        name: teacherId
        required: true
        schema:
          type: integer
        description: teacher id
      - in: path
        name: courseId
        required: true
        schema:
          type: integer
        description: course id
      - in: path
        name: lectureId
        required: true
        schema:
          type: integer
        description: lecture id
      responses:
        "204":
            description : The delete operation was successful
            content : {}
        "400":
            description: Bad request, errors in path parameters
            content : 
              application/json : 
                schema : 
                  $ref : '#/components/schemas/Error'
        "404":
            description: Not found (e.g. the lecture to cancel doesn't exist)
            content : {}
        "500":
            description : Internal Error
            content:
              application/json : 
                schema : 
                  $ref : '#/components/schemas/Error'
  /teachers/{teacherId}/courses/{courseId}/lectures/{lectureId}/students:
    get:
      tags:
        - teacher
      summary: "Get all the students that have an active booking for a given lecture"
      operationId: teacherGetCourseLectureStudents
      parameters:
      - in: path
        name: teacherId
        required: true
        schema:
          type: integer
        description: teacher id
      - in: path
        name: courseId
        required: true
        schema:
          type: integer
        description: course id
      - in: path
        name: lectureId
        required: true
        schema:
          type: integer
        description: lecture id
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentLecture'
        '400':
          description: "'teacherId' parameter is not valid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                source: "TeacherService"
                errno: 1
                error: "'teacherId' parameter is not an integer: fail"
                statusCode: 400
        '404':
          description: "'teacherId' parameter is not valid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                source: "TeacherService"
                errno: 30
                error: "course (courseId = 3) is not taught by this teacher (teacherId = 4)"
                statusCode: 404
        '500':
          description: Generic server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Course:
      type: object
      properties:
        courseId:
          type: integer
        description:
          type: string
        year:
          type: number
          example: 2020
    CourseJTeacherCourse:
      type: object
      properties:
        courseId:
          type: integer
        description:
          type: string
        year:
          type: number
        teacherId:
          type: integer
        isValid:
          type: integer
    Lecture:
      type: object
      properties:
        lectureId:
          type: integer
        courseId:
          type: integer 
        classId:
          type: integer 
        date:
          type: string
          format: date-time
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    StudentLecture:
      type: object
      properties:
        userId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        type:
          type: string
          description: this field defines what kind of user he/she is
          enum:
            - Student
            - Teacher
        studentId:
          type: integer
        lectureId:
          type: integer
    Student:
      type: object
      properties:
        userId:
          type: number
        type:
          type: string
          description: this field defines what kind of user he/she is
          enum:
            - Student
            - Teacher
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    Error:
      type: object
      properties:
        source:
          type: string
        errno:
          type: integer
        error:
          type: string
        statusCode:
          type: integer
