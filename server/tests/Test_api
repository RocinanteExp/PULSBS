{
	"info": {
		"_postman_id": "7243e747-d6cd-4bd4-a594-d83eac56a8ae",
		"name": "PULSBS Copy",
		"description": "se2 project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "tests-general",
			"item": [
				{
					"name": "user login - wrong cred.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc6d346f-a7a4-42a8-8998-e5346b734d3b",
								"exec": [
									"pm.test(\"Status code of POST /login\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /tickets\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "58393a7e-9ee9-45f5-8edb-4eb7f83259af",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"fake@email.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/api/v1/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login - correct cred.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "359500a3-9061-4338-ba03-ea7bb3f62b3c",
								"exec": [
									"pm.test(\"Status code of POST /login\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /tickets\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    console.log(responseJson)\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9306abe8-5717-4725-84f2-eafe7605b9c2",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"tjw85.student.baglio@inbox.testmail.app\",\r\n    \"password\": \"aldo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/api/v1/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff8cb825-c65b-465a-8056-7a2d3b28ca07",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "04267f0b-c9c0-4122-be5b-28b3615ca725",
								"exec": [
									"pm.test(\"Status code of POST /logout\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3001/api/v1/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login - correct cred. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0cf44e25-5350-4131-b396-132cfaf8d244",
								"exec": [
									"pm.test(\"Status code of POST /login\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /tickets\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    console.log(responseJson)\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a002cf7-7f9e-4263-8eb3-d8e5bcae9aca",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"tjw85.student.baglio@inbox.testmail.app\",\r\n    \"password\": \"aldo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/api/v1/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tests-teacher",
			"item": [
				{
					"name": "tests-teacher Sprint2",
					"item": [
						{
							"name": "teachers -> courses -> lectures | 1 or more",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "78629b99-ef64-4fe9-a262-c45f2ff4586f",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "04a0fd7b-5fc1-4e01-a9b9-daa2f0ce9838",
										"exec": [
											"pm.test(\"Status code of GET /teachers/4/courses/1/lectures\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /teachers/4/courses/1/lectures\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an(\"array\");\r",
											"    pm.expect(responseJson).to.have.length(3);\r",
											"        const expectedLectureId = [1, 2, 3]\r",
											"    for (let i = 0; i < responseJson.length; i++) {\r",
											"        pm.expect(responseJson[i].lectureId).to.be.equal(expectedLectureId[i]);  \r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/teachers/4/courses/1/lectures",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"teachers",
										"4",
										"courses",
										"1",
										"lectures"
									]
								}
							},
							"response": []
						},
						{
							"name": "teachers -> courses -> lectures | param not int",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aa952c1b-6388-481d-ad09-885ff8fabb10",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "54dd630e-01bf-4d25-9060-3cabaa5eba7b",
										"exec": [
											"pm.test(\"Status code of  GET /teachers/4/courses/\\\"foo\\\"/lectures\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /teachers/4/courses/\\\"foo\\\"/lectures\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.errno).to.eql(3);\r",
											"    pm.expect(responseJson.message).to.contain(\"courseId\");\r",
											"    pm.expect(responseJson.statusCode).to.eql(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/teachers/4/courses/\"foo\"/lectures",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"teachers",
										"4",
										"courses",
										"\"foo\"",
										"lectures"
									]
								}
							},
							"response": []
						},
						{
							"name": "teachers -> courses -> lectures | empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2e10b438-ef00-4ca9-a544-b90afc93c4fe",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1916c593-ab9e-4f5b-98e3-e43a56269af5",
										"exec": [
											"pm.test(\"Status code of GET /teachers/5/courses/4/lectures\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /teachers/5/courses/4/lectures\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an(\"array\");\r",
											"    pm.expect(responseJson).to.have.length(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/teachers/5/courses/4/lectures",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"teachers",
										"5",
										"courses",
										"4",
										"lectures"
									]
								}
							},
							"response": []
						},
						{
							"name": "teachers -> courses -> lectures | numBookings",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16056e4a-58fa-41c7-ae9c-ef6df73e2684",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "07a11e10-54ae-4195-bd26-9b813541d17a",
										"exec": [
											"pm.test(\"Status code of GET /teachers/4/courses/1/lectures?numBookings=true\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /teachers/4/courses/1/lectures?numBookings=true\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an(\"array\");\r",
											"    pm.expect(responseJson).to.have.length(3);\r",
											"    const expectedNumBookings = [1, 0, 0]\r",
											"    for (let i = 0; i < responseJson.length; i++) {\r",
											"        pm.expect(responseJson[i].numBookings).to.be.equal(expectedNumBookings[i]);  \r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/teachers/4/courses/1/lectures?numBookings=true",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"teachers",
										"4",
										"courses",
										"1",
										"lectures"
									],
									"query": [
										{
											"key": "numBookings",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "teachers -> courses -> lectures | from 1 or more",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e2c0feba-6320-45bd-aa0e-f1ee5b7472d3",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    pm.request.url.query.add(\"from=\" + (new Date()).toISOString());\r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "456666b3-4e21-4a44-ac83-6d3b8dfe075c",
										"exec": [
											"pm.test(\"Status code of GET /teachers/4/courses/1/lectures\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /teachers/4/courses/1/lectures\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an(\"array\");\r",
											"    pm.expect(responseJson).to.have.length(2);\r",
											"    const expectedLectureId = [2, 3]\r",
											"    for (let i = 0; i < responseJson.length; i++) {\r",
											"        pm.expect(responseJson[i].lectureId).to.be.equal(expectedLectureId[i]);  \r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/teachers/4/courses/1/lectures",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"teachers",
										"4",
										"courses",
										"1",
										"lectures"
									]
								}
							},
							"response": []
						},
						{
							"name": "teachers -> courses -> lectures | from empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7986edd9-0a3a-4159-85cf-ef6092dea4ae",
										"exec": [
											"pm.test(\"Status code of GET /teachers/4/courses/1/lectures\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /teachers/4/courses/1/lectures\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an(\"array\");\r",
											"    pm.expect(responseJson).to.have.length(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02af63ea-e193-4de1-92d7-2a8e9d9ad65d",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    const d = new Date();\r",
											"    d.setDate(d.getDate() + 3)\r",
											"    d.setHours(0,0,0,0);\r",
											"    pm.request.url.query.add(\"from=\" + d.toISOString());\r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/teachers/4/courses/1/lectures",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"teachers",
										"4",
										"courses",
										"1",
										"lectures"
									]
								}
							},
							"response": []
						},
						{
							"name": "teachers -> courses -> lectures -> id | cancellable",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dfa239ea-6b11-40d1-b7b8-788e13ea9faf",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "acf9628a-7dda-4317-b9d2-eda7a086fc20",
										"exec": [
											"pm.test(\"Status code of GET /teachers/4/courses/1/lectures\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/teachers/4/courses/2/lectures/4",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"teachers",
										"4",
										"courses",
										"2",
										"lectures",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "teachers -> courses -> lectures -> id | not cancellable",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4f288d7-2a1c-4f5a-b13e-42ed7d734ddd",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a2fbec02-6953-43b7-8b28-225925b89891",
										"exec": [
											"pm.test(\"Status code of GET /teachers/4/courses/1/lectures\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /teachers/4/courses/1/lectures\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.errno).to.eql(23);\r",
											"    pm.expect(responseJson.message).to.contain(\"lectureId\");\r",
											"    pm.expect(responseJson.statusCode).to.eql(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/teachers/4/courses/1/lectures/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"teachers",
										"4",
										"courses",
										"1",
										"lectures",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "teachers -> courses -> lectures -> id | switch remote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3e83d84d-e28f-4c9b-8424-6ee8f28dba6e",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ed9ec99c-21b3-452d-88ce-7f0f70429ab6",
										"exec": [
											"pm.test(\"Status code of PUT /teachers/4/courses/2/lectures/4?switchTo=remote\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/teachers/4/courses/2/lectures/4?switchTo=remote",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"teachers",
										"4",
										"courses",
										"2",
										"lectures",
										"4"
									],
									"query": [
										{
											"key": "switchTo",
											"value": "remote"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "teachers -> courses -> lectures -> id | switch fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eab0ba39-2952-4612-a8df-7cab89633a43",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0383b818-d362-47cc-a45a-9f31cf4b523b",
										"exec": [
											"pm.test(\"Status code of PUT /teachers/4/courses/1/lectures/3?switchTo=fail\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code of PUT /teachers/4/courses/1/lectures/3?switchTo=fail\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.errno).to.eql(22);\r",
											"    pm.expect(responseJson.message).to.contain(\"Delivery mode\");\r",
											"    pm.expect(responseJson.statusCode).to.eql(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/teachers/4/courses/1/lectures/3?switchTo=fail",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"teachers",
										"4",
										"courses",
										"1",
										"lectures",
										"3"
									],
									"query": [
										{
											"key": "switchTo",
											"value": "fail"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "teachers -> courses -> lectures -> id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c98a676a-a205-4936-b402-8df559ca7365",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db854054-c398-43a5-a5fe-1daf1711b62c",
										"exec": [
											"pm.test(\"Status code of GET /teachers/4/courses/1/lectures/1\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /teachers/4/courses/1/lectures/1\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an(\"object\");\r",
											"    pm.expect(responseJson[\"lectureId\"]).to.be.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/teachers/4/courses/1/lectures/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"teachers",
										"4",
										"courses",
										"1",
										"lectures",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "students -> courses -> lectures | from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4087db05-3055-4aaf-ae18-730510579153",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    pm.request.url.query.add(\"from=\" + (new Date()).toISOString());\r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12771e2b-c6bc-4a00-903d-060e7df56dc9",
										"exec": [
											"pm.test(\"Status code of GET /students/1/courses/1/lectures\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /students/1/courses/1/lectures\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an(\"array\");\r",
											"    pm.expect(responseJson).to.have.length(2);\r",
											"    expectedLectureId = [2, 3];\r",
											"    for(let i = 0; i < responseJson.length; i++) {\r",
											"        responseJson[i].lectureId = expectedLectureId[i];\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/students/1/courses/1/lectures",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"students",
										"1",
										"courses",
										"1",
										"lectures"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "610ec9a8-1084-4527-be83-cd1cbdffbd0c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60cdcc62-9f8a-4ba5-9dd8-0c693d02c0f9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET teacher's courses | empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e625d782-df32-4257-9fcf-6f151b08e39b",
								"exec": [
									"pm.test(\"Status code of GET /teachers/1/courses\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/1/courses\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"array\");\r",
									"    pm.expect(responseJson).to.have.length(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4496cad0-695c-40af-97de-648aaebf5fc8",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3001/api/v1/teachers/7/courses",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"api",
								"v1",
								"teachers",
								"7",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher's courses | 1 or more",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61de9f20-d2a7-4f3d-a74d-0e3e979b15ec",
								"exec": [
									"pm.test(\"Status code of GET /teachers/4/courses\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/4/courses\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.length(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3001/api/v1/teachers/4/courses",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"api",
								"v1",
								"teachers",
								"4",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher's courses | param not int",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94bd353a-e304-496c-b0c3-c0326581c802",
								"exec": [
									"pm.test(\"Status code of GET /teachers/fail/courses\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/fail/courses\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(3);\r",
									"    pm.expect(responseJson.message).to.contain(\"teacherId\");\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fffab6b1-0a87-4393-9fa0-ffb763ace6cc",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/fail/courses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"fail",
								"courses"
							]
						},
						"description": "GET teacher's courses | param not int"
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures | 1st params not int",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0257a8f9-98f4-4b36-9eaa-409bd7e83693",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eced6e3b-5af4-416e-a05c-420340de6819",
								"exec": [
									"pm.test(\"Status code of GET /teachers/fail/courses/1/lectures\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/fail/courses/1/lectures\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(3);\r",
									"    pm.expect(responseJson.message).to.contain(\"teacherId\");\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/fail/courses/1/lectures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"fail",
								"courses",
								"1",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures | 2nd params not int",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a15bae3-a5bf-48bc-b33c-d24b27f1aa3b",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b9e87eec-148b-48c8-b8e4-e1507de7d9ec",
								"exec": [
									"pm.test(\"Status code of GET /teachers/1/courses/fail/lectures\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/1/courses/fail/lectures\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(3);\r",
									"    pm.expect(responseJson.message).to.contain(\"courseId\")\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/1/courses/fail/lectures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"1",
								"courses",
								"fail",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures | teacher/course mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55ee59ee-ad96-4816-a6a3-b6dbcf6bc96b",
								"exec": [
									"pm.test(\"Status code of GET /teachers/5/courses/1/lectures\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/5/courses/1/lectures\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(30);\r",
									"    pm.expect(responseJson.message).to.contain(\"courseId\")\r",
									"    pm.expect(responseJson.statusCode).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54e9ca46-c16e-4563-ba46-ae4b284b36a8",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3001/api/v1/teachers/5/courses/1/lectures",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"api",
								"v1",
								"teachers",
								"5",
								"courses",
								"1",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures  | 1 or more",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0be06171-168a-4424-9b74-1d649b995997",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3562f13a-6c03-4ea1-adab-a5ce8d913b3c",
								"exec": [
									"pm.test(\"Status code of GET /teachers/4/courses/1/lectures\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/4/courses/1/lectures\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    console.log(responseJson)\r",
									"    const datetime1 = new Date();\r",
									"    const datetime2 = new Date();\r",
									"    const datetime3 = new Date();\r",
									"    datetime1.setDate(datetime1.getDate() -  1);\r",
									"    datetime1.setHours(8, 30, 00, 00);\r",
									"    datetime2.setDate(datetime2.getDate() + 1);\r",
									"    datetime2.setHours(8, 30, 00, 00);\r",
									"    datetime3.setDate(datetime3.getDate() + 2);\r",
									"    datetime3.setHours(8, 30, 00, 00);\r",
									"    const datetime = [datetime1, datetime2, datetime3];\r",
									"    const expected = [ [1, 1, 1, datetime1.toISOString(), 5400000, \"PRESENCE\"],\r",
									"    [2, 1, 1, datetime2.toISOString(), 5400000, \"PRESENCE\"],\r",
									"    [3, 1, 3, datetime3.toISOString(), 5400000, \"PRESENCE\"]]\r",
									"    const keys = [\"lectureId\", \"courseId\", \"classId\", \"startingDate\", \"duration\", \"delivery\"]\r",
									"    for(let i = 0; i < 3; i++) {\r",
									"        pm.expect(responseJson[i]).to.have.any.keys(...keys);\r",
									"        for(let j = 0; j < keys.length; j++) {\r",
									"          pm.expect(responseJson[i][keys[j]]).to.eq(expected[i][j]);\r",
									"        } \r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/4/courses/1/lectures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"4",
								"courses",
								"1",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures | empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a24904ed-ae9c-43f7-8527-a58c7d973681",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "04577256-f62d-4973-b600-c0b597e026e7",
								"exec": [
									"pm.test(\"Status code of GET /teachers/1/courses/fail/lectures\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/1/courses/fail/lectures\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"array\");\r",
									"    pm.expect(responseJson).to.have.length(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3001/api/v1/teachers/5/courses/4/lectures",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"api",
								"v1",
								"teachers",
								"5",
								"courses",
								"4",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures -> booked students | 1st params not int",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "94ba8ec5-f552-4391-8203-13f1ee534bb1",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f254b436-99a1-4f7a-bb1f-aba8d578c41f",
								"exec": [
									"pm.test(\"Status code of GET /teachers/fail/courses/1/lectures/2/students\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/fail/courses/1/lectures/2/students\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(3);\r",
									"    pm.expect(responseJson.message).to.contain(\"teacherId\");\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/fail/courses/1/lectures/2/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"fail",
								"courses",
								"1",
								"lectures",
								"2",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures -> booked students | 2nd params not int",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6db075bf-b7a7-437a-82b0-b39fada1f111",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ab8b725f-d97e-46b0-b566-13a190d1a577",
								"exec": [
									"pm.test(\"Status code of GET /teachers/4/courses/fail/lectures/2/students\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/4/courses/fail/lectures/2/students\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(3);\r",
									"    pm.expect(responseJson.message).to.contain(\"courseId\");\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/4/courses/fail/lectures/2/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"4",
								"courses",
								"fail",
								"lectures",
								"2",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures -> booked students | 3nd params not int Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5d7497ce-0871-415f-890d-5053fb4f694c",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "18cdbfe8-3c3f-4b95-bb7a-8826ae4fbd89",
								"exec": [
									"pm.test(\"Status code of GET /teachers/4/courses/1/lectures/fail/students\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/4/courses/1/lectures/fail/students\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(3);\r",
									"    pm.expect(responseJson.message).to.contain(\"lectureId\");\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/4/courses/1/lectures/fail/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"4",
								"courses",
								"1",
								"lectures",
								"fail",
								"students"
							]
						},
						"description": "GET teacher -> course -> lectures -> booked students | 3nd params not int Copy"
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures -> booked students | teacher/course mismatch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "492e47a6-421e-4e60-aaea-6cacdbe4b7ee",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "270abaea-8e4a-4a05-bd38-e26a3e9111fa",
								"exec": [
									"pm.test(\"Status code of GET /teachers/4/courses/3/lectures/1/students\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/4/courses/3/lectures/1/students\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(30);\r",
									"    pm.expect(responseJson.message).to.contain(\"courseId\")\r",
									"    pm.expect(responseJson.statusCode).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/4/courses/3/lectures/1/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"4",
								"courses",
								"3",
								"lectures",
								"1",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures -> booked students | course/lecture mismatch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "18ebfa50-b807-4735-a0e6-087f208e4935",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0a81320b-6952-4609-b43c-c44fed33803b",
								"exec": [
									"pm.test(\"Status code of GET /teachers/4/courses/3/lectures/1/students\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/4/courses/3/lectures/1/students\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(11);\r",
									"    pm.expect(responseJson.message).to.contain(\"lectureId\")\r",
									"    pm.expect(responseJson.statusCode).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/4/courses/1/lectures/4/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"4",
								"courses",
								"1",
								"lectures",
								"4",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures -> booked students | 1 or more",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f9b8947f-3c7f-4cb5-a13f-b5e663dad1b1",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2aed959e-abe2-4f66-aa04-546d12c935b5",
								"exec": [
									"pm.test(\"Status code of GET /teachers/4/courses/1/lectures/1/students\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/4/courses/1/lectures/1/students\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    const keys = [\"userId\", \"firstName\", \"lastName\", \"email\"];\r",
									"    const values = [1, \"Aldo\", \"Baglio\", \"tjw85.student.baglio@inbox.testmail.app\", \"STUDENT\"];\r",
									"\r",
									"    pm.expect(responseJson).to.be.an(\"array\"); \r",
									"    console.log(responseJson[0])  \r",
									"    pm.expect(responseJson[0]).to.have.any.keys(...keys);\r",
									"\r",
									"    for(let i = 0; i < keys.length; i++) {\r",
									"        pm.expect(responseJson[0][keys[i]]).to.eq(values[i]);\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/4/courses/1/lectures/1/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"4",
								"courses",
								"1",
								"lectures",
								"1",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures -> booked students | empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a2f56692-18a7-4515-946e-e6b9de5ea72d",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "583c2630-c7eb-4319-a853-96c3db90cb45",
								"exec": [
									"pm.test(\"Status code of GET /teachers/4/courses/1/lectures/1/students\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /teachers/4/courses/1/lectures/1/students\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"array\");\r",
									"    pm.expect(responseJson).to.have.length(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/4/courses/1/lectures/2/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"4",
								"courses",
								"1",
								"lectures",
								"2",
								"students"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tests-student",
			"item": [
				{
					"name": "tests-student Sprint2",
					"item": [
						{
							"name": "students -> courses -> lectures -> id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d28f74b-35fd-4d1c-a887-3ace5323eff8",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a21aeff3-dfd9-4460-94f7-508c5e5a8b96",
										"exec": [
											"pm.test(\"Status code of GET /teachers/4/courses/1/lectures\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/students/1/courses/1/lectures/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"students",
										"1",
										"courses",
										"1",
										"lectures",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "students -> courses -> lectures -> id | param not int",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9adafba2-3b9f-4041-bfaf-8584a15bbde5",
										"exec": [
											"pm.test(\"Status code of DELETE /students/1/courses/1/lectures/\\\"foo\\\"\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of DELETE /students/1/courses/1/lectures/\\\"foo\\\"\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.errno).to.eql(0);\r",
											"    pm.expect(responseJson.statusCode).to.eql(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/students/1/courses/1/lectures/\"foo\"",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"students",
										"1",
										"courses",
										"1",
										"lectures",
										"\"foo\""
									]
								}
							},
							"response": []
						},
						{
							"name": "students -> bookings | 1 or more",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "92bacc4b-5aa7-451b-8457-79708ffa3a4f",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eb5c5d75-0924-4549-b7f1-61b59837db74",
										"exec": [
											"pm.test(\"Status code of GET /students/1/bookings\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /students/1/bookings\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an(\"array\");\r",
											"    pm.expect(responseJson).to.have.length(1);\r",
											"    const expectedLectureId = [1];\r",
											"    for(let i = 0; i < responseJson.length; i++) {\r",
											"        responseJson[i].lectureId = expectedLectureId[i]; \r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/students/1/bookings",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"students",
										"1",
										"bookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "students -> bookings | empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0c956356-5854-4b5e-9d08-67eb116c6d2c",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "23ec4450-4939-4d84-ae74-9e3966b00faa",
										"exec": [
											"pm.test(\"Status code of GET /students/6/bookings\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /students/6/bookings\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an(\"array\");\r",
											"    pm.expect(responseJson).to.have.length(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/students/6/bookings",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"students",
										"6",
										"bookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "students -> courses -> lectures | from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98515816-ec2d-4085-9de4-8252426d735c",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    pm.request.url.query.add(\"from=\" + (new Date()).toISOString());\r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c862cade-03f9-49e2-986f-680c08b67928",
										"exec": [
											"pm.test(\"Status code of GET /students/1/courses/1/lectures\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /students/1/courses/1/lectures\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an(\"array\");\r",
											"    pm.expect(responseJson).to.have.length(2);\r",
											"    const expectedLectureId = [2, 3];\r",
											"    for(let i = 0; i < responseJson.length; i++) {\r",
											"        responseJson[i].lectureId = expectedLectureId[i];\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/students/1/courses/1/lectures",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"students",
										"1",
										"courses",
										"1",
										"lectures"
									]
								}
							},
							"response": []
						},
						{
							"name": "students -> courses -> lectures | student/course mismatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e4ca48f7-0715-4f72-a200-12a1b2006aa0",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "753a6482-98c3-467e-8e2a-34d3fd9997f2",
										"exec": [
											"pm.test(\"Status code of GET /students/1/courses/4/lectures\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /students/1/courses/4/lectures\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.errno).to.eql(730);\r",
											"    pm.expect(responseJson.message).to.contain(\"not enrolled\");\r",
											"    pm.expect(responseJson.statusCode).to.eql(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/students/1/courses/4/lectures",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"students",
										"1",
										"courses",
										"4",
										"lectures"
									]
								}
							},
							"response": []
						},
						{
							"name": "students -> courses -> lectures | 1 or more",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10ea9f6f-9c12-4faa-a12e-bb0fc0ef4678",
										"exec": [
											"function sendRequest(req) {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(req, (err, res) => {\r",
											"            if (err) {\r",
											"                return reject(err);\r",
											"            }\r",
											"            return resolve(res);\r",
											"        })\r",
											"    });\r",
											"}\r",
											"\r",
											"(async function main() {\r",
											"    const baseUrl = pm.globals.get(\"base_url\");\r",
											"    \r",
											"    const result = await sendRequest(`${baseUrl}/reset`);\r",
											"    console.log('Reset', result);\r",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a9f1b6cb-7baa-4f79-ac8a-37628aedb73d",
										"exec": [
											"pm.test(\"Status code of GET /students/1/courses/1/lectures\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body of GET /students/1/courses/1/lectures\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an(\"array\");\r",
											"    pm.expect(responseJson).to.have.length(3);\r",
											"    expectedLectureId = [1, 2, 3];\r",
											"    for(let i = 0; i < responseJson.length; i++) {\r",
											"        responseJson[i].lectureId = expectedLectureId[i];\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/students/1/courses/1/lectures",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"students",
										"1",
										"courses",
										"1",
										"lectures"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET student's courses | empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27853af6-4ec9-457e-93e8-2fc0f9d52d1f",
								"exec": [
									"pm.test(\"Status code of GET /students/6/courses\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /students/6/courses\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"array\");\r",
									"    pm.expect(responseJson).to.have.length(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ef943f1-c71a-4c34-a8b3-cfa4408b831c",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/6/courses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"6",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET student's courses | 1 or more",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16e0eb8a-0ea5-4f26-a7eb-fc2da180d8d3",
								"exec": [
									"pm.test(\"Status code of GET /students/1/courses\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /students/1/courses\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.length(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6b0bd5c2-7de7-4319-beb0-e2b21a0ad2e3",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/1/courses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET student's courses | param not int",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec27fe33-e5bd-4b2c-94a8-d846a0564466",
								"exec": [
									"pm.test(\"Status code of GET /students/fail/courses\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /students/fail/courses\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(0);\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "404a63ce-763e-4107-9a95-4ead9e43b2df",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/fail/courses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"fail",
								"courses"
							]
						},
						"description": "GET teacher's courses | param not int"
					},
					"response": []
				},
				{
					"name": "GET student -> course -> lectures | 1st params not int",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "52ca2021-475d-4c13-ab18-32051256140d",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0097f623-7ee1-4f3e-a4b0-ad7954b942b0",
								"exec": [
									"pm.test(\"Status code of GET /students/fail/courses/1/lectures\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /students/fail/courses/1/lectures\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(0);\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/fail/courses/1/lectures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"fail",
								"courses",
								"1",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET student -> course -> lectures | 2nd params not int",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3b4d1acf-95b1-41a5-8d0f-45527fe79308",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "483ba643-ec90-4148-b206-975e67e8c794",
								"exec": [
									"pm.test(\"Status code of GET /students/1/courses/fail/lectures\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /students/1/courses/fail/lectures\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(0);\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/1/courses/fail/lectures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1",
								"courses",
								"fail",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET student -> course -> lectures | student/course mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45561900-c1bc-43cf-ba38-f51eaddd204e",
								"exec": [
									"pm.test(\"Status code of GET /students/1/courses/4/lectures\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /students/1/courses/4/lectures\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.be.equal(730);\r",
									"    pm.expect(responseJson.message).to.contain(\"not enrolled\");\r",
									"    pm.expect(responseJson.statusCode).to.be.equal(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e12178b6-8d45-4589-ab14-c69a255be2a8",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/1/courses/4/lectures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1",
								"courses",
								"4",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET student -> course -> lectures  | 1 or more",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ae466f-b5a0-4c0a-9868-3515d45b4d3c",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "90743c31-c9fc-43cb-962b-7d9bf0b16dd9",
								"exec": [
									"pm.test(\"Status code of GET /students/1/courses/1/lectures\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /students/1/courses/1/lectures\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    console.log(responseJson)\r",
									"    const datetime1 = new Date();\r",
									"    const datetime2 = new Date();\r",
									"    const datetime3 = new Date();\r",
									"    datetime1.setDate(datetime1.getDate() -  1);\r",
									"    datetime1.setHours(8, 30, 00, 00);\r",
									"    datetime2.setDate(datetime2.getDate() + 1);\r",
									"    datetime2.setHours(8, 30, 00, 00);\r",
									"    datetime3.setDate(datetime3.getDate() + 2);\r",
									"    datetime3.setHours(8, 30, 00, 00);\r",
									"    const datetime = [datetime1, datetime2, datetime3];\r",
									"    const expected = [ [1, 1, 1, datetime1.toISOString(), 5400000, \"PRESENCE\"],\r",
									"    [2, 1, 1, datetime2.toISOString(), 5400000, \"PRESENCE\"],\r",
									"    [3, 1, 3, datetime3.toISOString(), 5400000, \"PRESENCE\"]]\r",
									"    const keys = [\"lectureId\", \"courseId\", \"classId\", \"startingDate\", \"duration\", \"delivery\"]\r",
									"    for(let i = 0; i < 3; i++) {\r",
									"        pm.expect(responseJson[i]).to.have.any.keys(...keys);\r",
									"        for(let j = 0; j < keys.length; j++) {\r",
									"          pm.expect(responseJson[i][keys[j]]).to.eq(expected[i][j]);\r",
									"        } \r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/1/courses/1/lectures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1",
								"courses",
								"1",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET student -> course -> lectures | empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5dd65383-2bdd-415d-9b77-78defbd323cf",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b0dce7b1-dd1f-46dc-b6b1-f0033b003937",
								"exec": [
									"pm.test(\"Status code of GET /students/3/courses/4/lectures\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /students/3/courses/4/lectures\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"array\"); \r",
									"    pm.expect(responseJson).to.have.length(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/3/courses/4/lectures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"3",
								"courses",
								"4",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET student -> course -> lectures -> book| 1st params not int",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "43495250-1136-4a49-8c50-8d83440976b2",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a3eca9ad-b783-48fc-a399-b536bb99006b",
								"exec": [
									"pm.test(\"Status code of GET /students/fail/courses/1/lectures/2\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of GET /students/fail/courses/1/lectures/2\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(0);\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/fail/courses/1/lectures/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"fail",
								"courses",
								"1",
								"lectures",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET teacher -> course -> lectures -> book | 2nd params not int",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "59c91fa4-82cd-4d58-a7c7-fdc7c6376997",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "281846e8-2afa-402d-8d6a-4b89e85d8ad5",
								"exec": [
									"pm.test(\"Status code of POST /students/1/courses/fail/lectures/2\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of POST /students/1/courses/fail/lectures/2\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(0);\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/1/courses/fail/lectures/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1",
								"courses",
								"fail",
								"lectures",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET student -> course -> lectures -> book| 3nd params not int Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1bbe99ec-45a5-4b1f-996c-25fe2225e5f1",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a87d8991-3d20-481d-acd1-c5ffb6e8460a",
								"exec": [
									"pm.test(\"Status code of POST /students/1/courses/1/lectures/fail\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of POST /students/1/courses/1/lectures/fail\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(0);\r",
									"    pm.expect(responseJson.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/1/courses/1/lectures/fail",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1",
								"courses",
								"1",
								"lectures",
								"fail"
							]
						},
						"description": "GET teacher -> course -> lectures -> booked students | 3nd params not int Copy"
					},
					"response": []
				},
				{
					"name": "GET student -> course -> lectures -> book | student/course mismatch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d9846572-edbd-4da1-84f9-1a83ddf78601",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ddd7421-6f52-4fa7-adc7-cbb1907baf3e",
								"exec": [
									"pm.test(\"Status code of POST /students/2/courses/1/lectures/1\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of POST /students/2/courses/1/lectures/1\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(730);\r",
									"    pm.expect(responseJson.statusCode).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/2/courses/1/lectures/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"2",
								"courses",
								"1",
								"lectures",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET student -> course -> lectures -> book | course/lecture mismatch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dbfef179-3cd4-4472-8cd6-9ac5a5e15297",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f318a25-aaf6-4751-883a-b44196ac93d5",
								"exec": [
									"pm.test(\"Status code of POST /students/1/courses/1/lectures/2\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of POST /students/1/courses/1/lectures/2\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(730);\r",
									"    pm.expect(responseJson.statusCode).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/2/courses/1/lectures/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"2",
								"courses",
								"1",
								"lectures",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET student -> course -> lectures -> book | lecture already booked",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "630e2c1b-3bc4-40df-905a-06e21e784005",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0754570d-62c9-4ac3-ad24-5c8cea87a723",
								"exec": [
									"pm.test(\"Status code of POST /students/2/courses/1/lectures/1\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body of POST /students/2/courses/1/lectures/1\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.errno).to.eql(730);\r",
									"    pm.expect(responseJson.statusCode).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/1/courses/1/lectures/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1",
								"courses",
								"1",
								"lectures",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET student -> course -> lectures -> book | lecture booked",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "73382b4a-6cf0-4849-9ec4-ce43cad01c53",
								"exec": [
									"function sendRequest(req) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(req, (err, res) => {\r",
									"            if (err) {\r",
									"                return reject(err);\r",
									"            }\r",
									"            return resolve(res);\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function main() {\r",
									"    const baseUrl = pm.globals.get(\"base_url\");\r",
									"    \r",
									"    const result = await sendRequest(`${baseUrl}/reset`);\r",
									"    console.log('Reset', result);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "70ef86f7-17e6-4bdc-8e88-128c3ebe11a3",
								"exec": [
									"pm.test(\"Status code of POST /students/2/courses/1/lectures/1\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/1/courses/1/lectures/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1",
								"courses",
								"1",
								"lectures",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}